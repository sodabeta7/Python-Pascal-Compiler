; ModuleID = "Test"
target triple = "unknown-unknown-unknown"
target datalayout = ""


define void @"writeln"(i32 %"x") 
{
entry:
  %"f" = inttoptr i64 139761332760592 to void (i32)*
  call void (i32)* %"f"(i32 %"x")
  ret void
}

define i32 @"readln"(i32 %"x") 
{
entry:
  %"f" = inttoptr i64 139761332760648 to i32 (i32)*
  %".2" = call i32 (i32)* %"f"(i32 %"x")
  ret i32 %".2"
}

define void @"codegen_global_func"() 
{
codegen_global_block:
  %"i" = alloca i32
  %"a" = alloca i32
  %"f" = alloca [50 x i32]
  %"i.1" = alloca i32
  store i32 1, i32* %"i.1"
  %"i.2" = load i32* %"i.1"
  %".2" = icmp sle i32 %"i.2", 7
  %"i.6" = alloca i32
  br i1 %".2", label %"loop", label %"after_bb"
loop:
  %"i.3" = load i32* %"i.1"
  %".4" = getelementptr [50 x i32]* %"f", i32 %"i.3", i32 0
  %"i.4" = load i32* %"i.1"
  %"call_fn" = call i32 (i32)* @"fib"(i32 %"i.4")
  store i32 %"call_fn", i32* %".4"
  %"i.5" = load i32* %"i.1"
  %".6" = add i32 %"i.5", 1
  store i32 %".6", i32* %"i.1"
  %".8" = icmp sle i32 %".6", 7
  br i1 %".8", label %"loop", label %"after_bb"
after_bb:
  store i32 1, i32* %"i.6"
  %"i.7" = load i32* %"i.6"
  %".11" = icmp sle i32 %"i.7", 7
  br i1 %".11", label %"loop.1", label %"after_bb.1"
loop.1:
  %"i.8" = load i32* %"i.6"
  %".13" = getelementptr [50 x i32]* %"f", i32 %"i.8", i32 0
  %"arraymember" = load i32* %".13"
  call void (i32)* @"writeln"(i32 %"arraymember")
  %"i.9" = load i32* %"i.6"
  %".14" = add i32 %"i.9", 1
  store i32 %".14", i32* %"i.6"
  %".16" = icmp sle i32 %".14", 7
  br i1 %".16", label %"loop.1", label %"after_bb.1"
after_bb.1:
  ret void
}

define i32 @"fib"(i32 %"x") 
{
entry:
  %"x.1" = alloca i32
  store i32 %"x", i32* %"x.1"
  %"fib.1" = alloca i32
  %"x.2" = load i32* %"x.1"
  %".3" = icmp eq i32 %"x.2", 0
  %"x.3" = load i32* %"x.1"
  %".4" = icmp eq i32 %"x.3", 1
  %"integer_or" = or i1 %".3", %".4"
  %".5" = icmp ne i1 %"integer_or", 0
  br i1 %".5", label %"then_bb", label %"else_bb"
then_bb:
  store i32 1, i32* %"fib.1"
  br label %"merge_bb"
else_bb:
  %"x.4" = load i32* %"x.1"
  %"integer_sub" = sub i32 %"x.4", 2
  %"call_fn" = call i32 (i32)* @"fib"(i32 %"integer_sub")
  %"x.5" = load i32* %"x.1"
  %"integer_sub.1" = sub i32 %"x.5", 1
  %"call_fn.1" = call i32 (i32)* @"fib"(i32 %"integer_sub.1")
  %"integer_add" = add i32 %"call_fn", %"call_fn.1"
  store i32 %"integer_add", i32* %"fib.1"
  br label %"merge_bb"
merge_bb:
  %"fib.2" = load i32* %"fib.1"
  ret i32 %"fib.2"
}


