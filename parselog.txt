    lex.py: 922:lex: tokens   = ('cCHAR', 'cINTEGER', 'cREAL', 'cBOO', 'cSTRING', 'oLP', 'oRP', 'oLB', 'oRB', 'oPLUS', 'oMINUS', 'oMUL', 'oDIV', 'oASSIGN', 'oEQUAL', 'oLT', 'oGT', 'oLE', 'oGE', 'oUNEQU', 'oCOMMA', 'oSEMI', 'oCOLON', 'oQUOTE', 'oDOTDOT', 'oDOT', 'oARROW', 'yNAME', 'kDIV', 'kMOD', 'kPACKED', 'kSET', 'kARRAY', 'SYS_PROC', 'kGOTO', 'kIN', 'kIF', 'kREAD', 'kUNTIL', 'kOF', 'kLABEL', 'SYS_FUNCT', 'kOR', 'kREPEAT', 'kDO', 'kEND', 'kRECORD', 'cSYS_TYPE', 'kFUNCTION', 'kWHILE', 'kCASE', 'kPROCEDURE', 'kCONST', 'kDOWNTO', 'kFOR', 'kVAR', 'kTYPE', 'kBEGIN', 'kAND', 'kTHEN', 'kWITH', 'kTO', 'kPROGRAM', 'kNOT', 'kELSE', 'cSYS_CON')
    lex.py: 923:lex: literals = ''
    lex.py: 924:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_cINTEGER_10 -> '[1-9][0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_cINTEGER_8 -> '0[0-7]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_cINTEGER_16 -> '0(x|X)[0-9a-fA-F]+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_cREAL -> '[0-9]+(\.[0-9]+)?([E|e][+\-]?[0-9]+)?' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ID_or_KEYWORD -> '[a-zA-Z_][_a-zA-Z0-9]*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_cSTRING -> '\'(\\.|[^\'])(\\.|[^\'])+\'' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_cCHAR -> ''([^']|\")'' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oMUL -> '\*|MUL' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oGE -> '\>\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oASSIGN -> '\:\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oDOTDOT -> '\.\.' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oUNEQU -> '\<\>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oLE -> '\<\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oDIV -> 'div' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oLT -> '\<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oPLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oGT -> '\>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oCOLON -> '\:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oCOMMA -> '\,' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oARROW -> '\^' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oRB -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oRP -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oQUOTE -> '\'' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oLP -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oMINUS -> '\-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oSEMI -> '\;' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oEQUAL -> '\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oLB -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_oDOT -> '\.' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_newline>\n+)|(?P<t_cINTEGER_10>[1-9][0-9]*)|(?P<t_cINTEGER_8>0[0-7]*)|(?P<t_cINTEGER_16>0(x|X)[0-9a-fA-F]+)|(?P<t_cREAL>[0-9]+(\.[0-9]+)?([E|e][+\-]?[0-9]+)?)|(?P<t_ID_or_KEYWORD>[a-zA-Z_][_a-zA-Z0-9]*)|(?P<t_cSTRING>\'(\\.|[^\'])(\\.|[^\'])+\')|(?P<t_cCHAR>'([^']|\")')|(?P<t_oMUL>\*|MUL)|(?P<t_oGE>\>\=)|(?P<t_oASSIGN>\:\=)|(?P<t_oDOTDOT>\.\.)|(?P<t_oUNEQU>\<\>)|(?P<t_oLE>\<\=)|(?P<t_oDIV>div)|(?P<t_oLT>\<)|(?P<t_oPLUS>\+)|(?P<t_oGT>\>)|(?P<t_oCOLON>\:)|(?P<t_oCOMMA>\,)|(?P<t_oARROW>\^)|(?P<t_oRB>\])|(?P<t_oRP>\))|(?P<t_oQUOTE>\')|(?P<t_oLP>\()|(?P<t_oMINUS>\-)|(?P<t_oSEMI>\;)|(?P<t_oEQUAL>\=)|(?P<t_oLB>\[)|(?P<t_oDOT>\.)'
